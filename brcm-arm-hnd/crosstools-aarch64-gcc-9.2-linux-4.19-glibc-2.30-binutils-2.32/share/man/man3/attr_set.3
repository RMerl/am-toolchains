.\" Copyright (C) 2001, 2002, 2003, 2006 Silicon Graphics, Inc.
.\" All rights reserved.
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual.  If not, see
.\" <http://www.gnu.org/licenses/>.
.\"
.TH ATTR_SET 3 "Extended Attributes" "Dec 2001" "XFS Compatibility API"
.SH NAME
attr_set, attr_setf \- set the value of a user attribute of a filesystem object
.SH C SYNOPSIS
.PP
.sp
.nf
.B #include <attr/attributes.h>
.sp
.B "int attr_set (const char *\f2path\f3, const char *\f2attrname\f3, "
.B "              const char *\f2attrvalue\f3, const int \f2valuelength\f3,"
.B "              int \f2flags\f3);"
.PP
.B "int attr_setf (int \f2fd\f3, const char *\f2attrname\f3, "
.B "               const char *\f2attrvalue\f3, const int \f2valuelength\f3,"
.B "               int \f2flags\f3);"
.Op
.SH DESCRIPTION
The
.B attr_set
and
.B attr_setf
functions provide a way to create attributes and set/change their values.
.P
.I Path\^
points to a path name for a filesystem object, and
.I fd\^
refers to the file descriptor associated with a file.
If the attribute
.I attrname
does not exist, an attribute with the given name and value will be created
and associated with that indicated filesystem object.
If an attribute with that name already exists on that filesystem object,
the existing value is replaced with the new value given in this call.
The new attribute value is copied from the
.I attrvalue
buffer for a total of
.I valuelength
bytes.
The
.I flags
argument can contain the following symbols bitwise OR'ed together:
.TP
.SM
\%ATTR_ROOT
Look for
.I attrname
in the
.B root
address space, not in the
.B user
address space.
(limited to use by super-user only)
.TP
.SM
\%ATTR_DONTFOLLOW
Do not follow symbolic links when resolving a
.I path
on an
.B attr_set
function call.
The default is to follow symbolic links.
.TP
.SM
\%ATTR_CREATE
Return an error (EEXIST) if an attribute of the given name
already exists on the indicated filesystem object,
otherwise create an attribute with the given name and value.
This flag is used to implement a pure create operation,
without this flag
.B attr_set
will create the attribute if it does not already exist.
An error (EINVAL) will be returned if both ATTR_CREATE and ATTR_REPLACE
are set in the same call.
.TP
.SM
\%ATTR_REPLACE
Return an error (ENOATTR) if an attribute of the given name
does not already exist on the indicated filesystem object,
otherwise replace the existing attribute\'s value with the given value.
This flag is used to implement a pure replacement operation,
without this flag
.B attr_set
will create the attribute if it does not already exist.
An error (EINVAL) will be returned if both ATTR_CREATE and ATTR_REPLACE
are set in the same call.
.PP
.B attr_set
will fail if one or more of the following are true:
.TP 17
.SM
\%[ENOATTR]
The attribute name given is not associated with the indicated
filesystem object and the ATTR_REPLACE flag bit was set.
.TP
.SM
\%[E2BIG]
The value of the given attribute is too large, it exceeds the
maximum allowable size of an attribute value.
.TP
.SM
\%[EEXIST]
The attribute name given is already associated with the indicated
filesystem object and the ATTR_CREATE flag bit was set.
.TP
.SM
\%[ENOENT]
The named file does not exist.
.TP
.SM
\%[EPERM]
The effective user
.SM ID
does not match the owner of the file
and the effective user
.SM ID
is not super-user.
.TP
.SM
\%[ENOTDIR]
A component of the
path prefix
is not a directory.
.TP
.SM
\%[EACCES]
Search permission is denied on a
component of the
path prefix.
.TP
.SM
\%[EINVAL]
A bit was set in the
.I flag
argument that is not defined for this system call,
or both the ATTR_CREATE and ATTR_REPLACE flags bits were set.
.TP
.SM
\%[EFAULT]
.I Path,
.I attrname,
or
.I attrvalue
points outside the allocated address space of the process.
.TP
.SM
\%[ELOOP]
A path name lookup involved too many symbolic links.
.TP
.SM
\%[ENAMETOOLONG]
The length of
.I path
exceeds
.SM
.RI { MAXPATHLEN },
or a pathname component is longer than
.SM
.RI { MAXNAMELEN }.
.PP
.B attr_setf\^
will fail if:
.TP 15
.SM
\%[ENOATTR]
The attribute name given is not associated with the indicated
filesystem object and the ATTR_REPLACE flag bit was set.
.TP
.SM
\%[E2BIG]
The value of the given attribute is too large, it exceeds the
maximum allowable size of an attribute value.
.TP
.SM
\%[EEXIST]
The attribute name given is already associated with the indicated
filesystem object and the ATTR_CREATE flag bit was set.
.TP
.SM
\%[EINVAL]
A bit was set in the
.I flag
argument that is not defined for this system call,
or both the ATTR_CREATE and ATTR_REPLACE flags bits were set, or
.I fd\^
refers to a socket, not a file.
.TP
.SM
\%[EFAULT]
.I Attrname,
or
.I attrvalue
points outside the allocated address space of the process.
.TP
.SM
\%[EBADF]
.I Fd\^
does not refer to a valid descriptor.
.SH "DIAGNOSTICS"
On success, zero is returned.  On error, \-1 is returned, and
.I errno
is set appropriately.
.SH "SEE ALSO"
.BR attr (1),
.BR attr_get (3),
.BR attr_list (3),
.BR attr_multi (3),
and
.BR attr_remove (3).
